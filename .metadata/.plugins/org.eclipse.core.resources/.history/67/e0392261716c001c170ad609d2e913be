package Ch07_ex03;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;

public class Ch07_연습문제 {
/*	1. 3번
	
	2. 클래스, 인터페이스, 메소드를 특정 타입에 종속되지 않게  시켜 작성하는 기술을 컬렉션이라 한다.
	Vector<E>에서 E는 제네릭 타입 혹은 제네릭 겍체 라고 부른다.
	E에 Integer 등과 같이 객체 타입을 지정하여 특정 타입의 데이터만 다루도록 만드는 작업을 구체화라고 한다.
	제네릭 기능은 C++에서 먼저 만들어졌으며 C++에서는 다형성이라고 부른다
	
	3. 3번
	
	5. 2번
	
	6. Vector<Double> v = new Vector<Double>();
	
	7. 초과된용량의 반정도(?) 12
	
	

*/
	public static void main04(String[] args) {
		Vector<String> sv = new Vector<String>();
		HashMap<String, Integer> h = new HashMap<String, Integer>();
		ArrayList<String> pa = new ArrayList<String>(10);
		HashMap<String, Integer> pop = new HashMap<String, Integer>();
	}
	
	public static void main07(String[] args) {
		Vector<Integer> v = new Vector<Integer>(3);
		for(int i = 0; i < 10; i++) {
			v.add(i);
		}
		System.out.println(v.capacity());
	}
	
	public static void main(String[] args) {
		ArrayList<String> a = new ArrayList<String>(10);
		a.add("Java");
		a.add("C++");
		System.out.println(a.size());
		a.remove(a.size() - 1);
		System.out.println(a.size());
	}
	
	
}


















