package Ch07_ex01;

import java.util.Vector;

abstract class Ex{
	public abstract void run();
	
	public void start() {
		System.out.println("--- 예제 실행 ---");
		run();
	}
}

class Ex01 extends Ex{
	@Override
	public void run() {
		System.out.println(">>> 정수 값만 다루는 제네릭 벡터 생성");
		Vector<Integer> v = new Vector<Integer>();
		
		System.out.println("v.size() = " + v.size());
		System.out.println("v.capacity() = " + v.capacity());
		
		v.add(5);
		v.add(4);
		v.add(-1);
		v.add(2, 100);
		System.out.println("add 후 v.size() = " + v.size());
		
		System.out.println(v);
		for(Integer i : v) {
			System.out.print(i + "\t");
		}
		System.out.println();
		
		int sum = 0;
		for(int i = 0; i < v.size(); i++) {
//			sum += v.get(i); 
			sum += v.elementAt(i); // v.get(i) 상동
		}
		System.out.println("sum = " + sum);
	}
}

class Point {
	private int x, y;
	public Point() {
		this(0, 0);
	}
	public Point(int x, int y) {
		this.x = x;
		this.y = y;
	}
	
	@Override
	public String toString() {
		return "(" + x + ", " + y + ")";
	}
}

class Ex02 extends Ex{
	public void run() {
		System.out.println(">>> Point 객체를 요소로만 가지는 벡터 생성");
		Vector<Point> v = new Vector<Point>();
		v.add(new Point (2, 3));
		v.add(new Point (-5, 20));
		v.add(new Point (30, -8));
		v.remove(1);
		System.out.println(v);
	}
}

public class Ch07_Ex01_VectorEx {
	public Ch07_Ex01_VectorEx() {
		// 생성자는 필드를 초기화 한다.
		// 예제 구현 메소드 별도로 만든다
		Ex ex01 = new Ex01();
		ex01.start();
		System.out.println();
		System.out.println();

		Ex ex = new Ex02();
		ex.start();
	}
	
//	private void ex01() {
//		// 정수 값만 다루는 제네릭 벡터 생성
//		Vector<Integer> v = new Vector<Integer>();
//	}

	public static void main(String[] args) {
		// 메인에 직접 구현하기보다는 객체에 구현 해 보자
		new Ch07_Ex01_VectorEx();
	}

}
